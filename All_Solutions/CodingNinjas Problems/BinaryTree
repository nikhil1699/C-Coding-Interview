#include<iostream>
#include<queue>
using namespace std;

template <typename T>
class BinaryTreeNode{
public:
    T data;
    BinaryTreeNode* left;
    BinaryTreeNode* right;

    BinaryTreeNode(T element){
        this->data = element;
        left = NULL;
        right = NULL;
    }

    ~BinaryTreeNode(){
        delete left;
        delete right;
        //Delete can be called on NULL
    }
};

void printTree(BinaryTreeNode<int>* root){
    if(root==NULL)
        return;
    cout<<root->data<<": ";
    if(root->left!=NULL)
        cout<<"L"<<root->left->data<<" ";
    if(root->right!=NULL)
        cout<<"R"<<root->right->data;
    cout<<endl;
    printTree(root->left);
    printTree(root->right);
}

BinaryTreeNode<int>* takeInput(){
    int rootData;
    cout<<"Enter data "<<endl;
    cin>>rootData;
    if(rootData==-1){
        return NULL;
    }
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootData);
    BinaryTreeNode<int>* leftChild = takeInput();
    BinaryTreeNode<int>* rightChild = takeInput();
    root->left = leftChild;
    root->right = rightChild;
    return root;
}

BinaryTreeNode<int>* takeInputLevelWise(){
    int rootData;
    cout<<"Enter root data "<<endl;
    cin>>rootData;
    if(rootData == -1)
        return NULL;

    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size()!=0){
        cout<<"Enter the left child of "<<pendingNodes.front()->data<<endl;
        int leftChildData;
        cin>>leftChildData;
        if(leftChildData!=-1){
            BinaryTreeNode<int>* leftChild = new BinaryTreeNode<int>(leftChildData);
            pendingNodes.push(leftChild);
            pendingNodes.front()->left=leftChild;
        }
         cout<<"Enter the right child of "<<pendingNodes.front()->data<<endl;
        int rightChildData;
        cin>>rightChildData;
        if(rightChildData!=-1){
            BinaryTreeNode<int>* rightChild = new BinaryTreeNode<int>(rightChildData);
            pendingNodes.push(rightChild);
            pendingNodes.front()->right=rightChild;
        }
        pendingNodes.pop();
    }
    return root;
}


int numNodes(BinaryTreeNode<int>* root){
    if(root==NULL)
        return 0;
    return 1 + numNodes(root->left) + numNodes(root->right);
}

void inorder(BinaryTreeNode<int>* root){
   if(root==NULL)
        return;
   inorder(root->left);
   cout<<root->data<<" ";
   inorder(root->right);

}

void preOrder(BinaryTreeNode<int> *root) {
if(root==NULL)
        return;
cout<<root->data<<" ";
preOrder(root->left);
preOrder(root->right);
}

void postOrder(BinaryTreeNode<int> *root) {
    if(root==NULL)
        return;

    postOrder(root->left);
    postOrder(root->right);
    cout<<root->data<<" ";

}

int height(BinaryTreeNode<int>* root){
    if(root==NULL)
        return 0;
    return 1+max(height(root->left),height(root->right));
}

int diameter(BinaryTreeNode<int>* root){
    if(root==NULL)
        return 0;
    int option1 = height(root->left) + height(root->right);
    int option2 = diameter(root->left);
    int option3 = diameter(root->right);
    return max(option1,max(option2,option3));
}

pair<int,int> heightDiameter(BinaryTreeNode<int>* root){
    if(root==NULL){
        pair<int,int> p;
        p.first=0;
        p.second=0;
        return p;
    }
    pair<int,int> leftAns=heightDiameter(root->left);
    pair<int,int> rightAns=heightDiameter(root->right);
    int lh=leftAns.first;
    int rh=rightAns.first;
    int ld=leftAns.second;
    int rd=rightAns.second;
    int height = 1 + max(lh,rh);
    int diam = max(lh+rh,max(ld,rd));
    pair<int,int> p;
    p.first=height;
    p.second=diam;
    return p;
}

int main(){
    /*
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(1);
    BinaryTreeNode<int>* node1 = new BinaryTreeNode<int>(2);
    BinaryTreeNode<int>* node2 = new BinaryTreeNode<int>(3);

    root->left = node1;
    root->right = node2;
    */
    // 1 2 3 4 5 6 7 -1 -1 -1 -1 8 9 -1 -1 -1 -1 -1 -1
    //BinaryTreeNode<int>* root = takeInput();
    BinaryTreeNode<int>* root = takeInputLevelWise();
    printTree(root);
    //cout<<"Num: "<<numNodes(root);
    //inorder(root);
    cout<<endl;
    pair<int,int> p = heightDiameter(root);
    cout<<"Height: "<<p.first<<endl;
    cout<<"Diameter: "<<p.second<<endl;
}
