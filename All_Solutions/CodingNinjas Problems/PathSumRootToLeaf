#include <iostream>
#include <queue>
#include<vector>

template <typename T>
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }

    ~BinaryTreeNode() {
    	if(left) 
       		delete left;
    	if(right) 
       		delete right;
    }
};

using namespace std;

BinaryTreeNode<int>* takeInput() {
    int rootData;
    //cout << "Enter root data : ";
    cin >> rootData;
    if(rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        BinaryTreeNode<int> *currentNode = q.front();
	q.pop();
        int leftChild, rightChild;
        //cout << "Enter left child of " << currentNode -> data << " : ";
        cin >> leftChild;
        if(leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode -> left =leftNode;
            q.push(leftNode);
        }
        //cout << "Enter right child of " << currentNode -> data << " : ";
        cin >> rightChild;
        if(rightChild != -1) {
            BinaryTreeNode<int>* rightNode = new BinaryTreeNode<int>(rightChild);
            currentNode -> right =rightNode;
            q.push(rightNode);
        }
    }
    return root;
}

void rootToLeafPathsSumToK(BinaryTreeNode<int> *root, int k, vector<int> output){
    if(root==NULL)
        return;
    output.push_back(root->data);
    if(k<=0)
        return;
    if(root->left==NULL && root->right==NULL && root->data==k){
        output.push_back(root->data);
        for(int i =0;i<output.size();i++){
            cout<<output[i];
            if(i<output.size()-1)
                cout<<" ";
            i++;
        }
        cout<<endl;
        return;
    }
    output.push_back(root->data);
    rootToLeafPathsSumToK(root->left,k-root->data,output);
    rootToLeafPathsSumToK(root->right,k-root->data,output);
}

void rootToLeafPathsSumToK(BinaryTreeNode<int> *root, int k) {
    vector<int> output;
    rootToLeafPathsSumToK(root,k,output);
}

int main() {
    BinaryTreeNode<int>* root = takeInput();
    int k;
    cin >> k;
    rootToLeafPathsSumToK(root, k);
    delete root;
}
